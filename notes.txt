====================
current tasks:
====================
>implement reading of .rle files.[include an example file in the report]
http://golly.sourceforge.net/Help/formats.html#rule
-The .rle format can express the following information:
    comments, game transition rules, cell configuration, generation count, the absolute position on screen
-comments are  lines which are blank or start with "#"
-the start of the data is marked by the first non-comment line, which should start with "x"
    this line gives the dimensions of the pattern, and the rule, e.g.
       "x = width, y = height, rule = rule"
       >the data here is delimited by ","
       >within these comma delimited tokens, e.g. "x = 123", the integer must be extracted.
-for conway's Life,
 rule = B3/S23
-lines which are not comments, and do not start with "x" are used as storage of the cell configuration:
 the RLE format uses run length encoding - where repeated runs of the same character are shortened
 the character prefixed by the length of its run, e.g.
 AAAAAABBBAACAAA
 would be compressed to:
 6A3B2AC3A
-in two-state games like Life, "b" represents an off cell, and "o" represents an on cell.
-lines are terminated by "$". Note that "$" can also be run length encoded.
-trailing off cells at the end of a line can be ignored - just go to the next line if the rest of
this line is empty.
-an optional "!" represents the end of a pattern

>Implementation:
-add the permission to read files from the SD card
-implement File reader
-implement parsing of rle files
    String.split() or StringTokenizer?
    https://stackoverflow.com/questions/11442162/java-run-length-encoding

bibliography:
http://michael.dipperstein.com/rle/
====================
bug: patterns are not being loaded accurately.
>empty rows are ignored.
    note - a line break "$" can be run length encoded, e.g. 3$
    new strategy: don't split the string around "$".
    Split the whole thing into rle tokens - "$" would have to be accepted in place of 'o' or 'b'.
    Iterate through these tokens, incrementing the line index when at the end of a line or reaching
    a '$'. Increment an appropriate number of lines when reaching an rle '$'.
>runs of >1 live cells do not work
    fixed  - dumb error in loop
====================
now that the Java side of pattern parsing is implemented, the loaded pattern must displayed correctly.
>add the option to not wrap edges?
====================
Graphical representation of grid:
-compare options for different rendering techniques
>openGL
>Canvas, as per tutorial:

https://developer.android.com/guide/topics/graphics/2d-graphics.html
There are two options presented here - draw into a View, or directly into a Canvas.
I have chosen to draw directly into a Canvas, since this is recommended when the graphic needs to be
regularly re-drawn. Drawing into a View is only suitable for static graphics.

Drawing into a Canvas can be done the UI thread, or in a separate thread, or in a separate thread.
It is simpler to do it in the UI thread, however this requires waiting for the UI thread to be signal
it is ready at each turn, via the onDraw() callback. By using a separate thread, the drawing can be
done as fast as possible.
should this be done in the UI thread or in a separate thread?
this will be done on a separate thread.

== how does Android handle graphics? ==
https://source.android.com/devices/graphics/architecture.html

low level components:

BufferQueue:
connects something that generates buffers of graphical data (the producer) to something that
accepts the data for display or further processing (the consumer)
SurfaceFlinger:
Accepts buffers of data and sends them to the HAL for display
Surface:
Produces a buffer queue that is often consumed by SurfaceFlinger. When rendering onto a Surface,
the result ends up in a buffer that gets shipped to the consumer.
Canvas:
Provides a Java API for drawing onto a Surface.
SurfaceHolder:
APIs enable getting and setting Surface parameters such as size and format

high level components:
SurfaceView:
Combines a Surface and a View. Can be rendered in a thread separate to the main UI thread (by SurfaceFlinger)
Is handled in the Layout just like any other View
The View part of a SurfaceView is just a transparent placeholder - the Surface is rendered into here.


>A 'game loop' is needed to keep the simulation running. The interval of this loop should be controlled
by a set value, rather than just looping as fast as the system will allow.
>The generation of the grid done by the model needs to be properly synchronised with view updates,
to prevent the grid from changing whilst it is being rendered. These two tasks may as well be done
in the same thread, since they have to be sequential.

https://source.android.com/devices/graphics/arch-gameloops.html

>decide a time for iterations, e.g. 33ms - ie 30fps
>check how long it takes to do the computation for each step, subtract this from 33ms as the wait time
>ensure the wait time is at least 2ms though, to prevent starving the system.
>if the time taken is longer than the time for a frame, then that frame will have to be dropped
>there are libraries available for managing all of the above. Using such a library may not be necesary
since the game is very simple.
>we could have separate threads for computing the grid and rendering, with a shared semaphore.
    // Model
    run() {
        Thread.sleep(GRID_INTERVAL);
        synchronized (mLock) {
            iterateGrid();
        }
    }
    // View
    run() {
        Thread.sleep(FRAME_INTERVAL);
        synchronized (mLock) {
            showGrid();
        }
    }

====================
note that the current implementation of GridGraphic is an Active View - documentation should be
updated to reflect this, and why this decision was made.
>the 'view' part of the Android system should be in charge of timing renders. The view is the only
part of the Android system that is notified on screen updates.
====================
preventing wrapping:
-note the implementation of getCel() method.
-when gliders reach the edge of a bounded grid with the 'edges are always dead' rule, they become
square blocks.
-on the glider gun, this causes the pattern to collapse.

====================
getting translucency in the SurfaceView:
By default, a SurfaceView is all black. We want it to be transparent.
The missing lines were (in the constructor of the SurfaceView):
        setZOrderOnTop(true);
        holder.setFormat(PixelFormat.TRANSLUCENT);
This may cause problems later on when trying to place views atop the SurfaceView.
====================
current tasks:
>implement speed control slider
====================

-is there a way to package-protect the View from the Model?
-How should Logging be handled??
    Log can be mocked in unit tests.

-make an ERD diagram for the initial app 
    >this will be good for explaining MVP details

-what are the options for order of instantiation?
    >calling to Set[Component]() means that the component reference can
    not be declared final. How can the risk that this causes be negated?
    >the set[component]() methods must be called immediately after construcors
    >what about using an injection framework??
        -compare the options etc etc
http://hannesdorfmann.com/android/presenters-dont-need-lifecycle
https://www.reddit.com/r/androiddev/comments/4bs4lz/presenters_dont_need_lifecycle_events_hannes/
    -for now: use the Activity to manage lifecycle events. This approach is
    chosen because it is consistent with SRP (what is SRP?)
    >why is this the best approach? What were the alternatives?


-coding standards... justify them. Cite clean code.

-can I use lambdas? Might need to increase MinSDKVersion

-graph loc, number of TODO's etc.. get data from git

-the grid needs to be initialised onCreate..
    how should lifecycle events tie into MVP?

-creating a generic framework for the Life implementation:
    why do this?
        >the algorithm is likely to change frequently
        >inter-change should be simple, so that implementations can be rapidly
        developed, switched and compared
    how can the algorithm best be encapsulated?


test...